// <auto-generated />
using System;
using IOWebFramework.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace IOWebFramework.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200521100735_PositionRemovedFromDb")]
    partial class PositionRemovedFromDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("CDN.Core3.Data.Data.CdnFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ContentId")
                        .HasColumnName("content_id")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateUploaded")
                        .HasColumnName("date_uploaded")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileDescription")
                        .HasColumnName("file_description")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnName("file_name")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<int>("FileSize")
                        .HasColumnName("file_size")
                        .HasColumnType("integer");

                    b.Property<string>("FileTitle")
                        .HasColumnName("file_title")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("SourceId")
                        .IsRequired()
                        .HasColumnName("source_id")
                        .HasColumnType("text");

                    b.Property<int>("SourceType")
                        .HasColumnName("source_type")
                        .HasColumnType("integer");

                    b.Property<string>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UserUploaded")
                        .HasColumnName("user_uploaded")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id")
                        .HasName("pk_cdn_files");

                    b.ToTable("cdn_files");
                });

            modelBuilder.Entity("CDN.Core3.Data.Data.CdnFileContent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CdnFileId")
                        .HasColumnName("cdn_file_id")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasColumnType("bytea");

                    b.HasKey("Id")
                        .HasName("pk_cdn_file_contents");

                    b.HasIndex("CdnFileId")
                        .HasName("ix_cdn_file_contents_cdn_file_id");

                    b.ToTable("cdn_file_contents");
                });

            modelBuilder.Entity("IO.LogOperation.Models.LogOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnName("action")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnName("controller")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("MasterKey")
                        .HasColumnName("master_key")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ObjectKey")
                        .IsRequired()
                        .HasColumnName("object_key")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("OperationDate")
                        .HasColumnName("operation_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OperationTypeID")
                        .HasColumnName("operation_type_id")
                        .HasColumnType("integer");

                    b.Property<string>("OperationUser")
                        .HasColumnName("operation_user")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("OperationUserID")
                        .HasColumnName("operation_user_id")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UserData")
                        .HasColumnName("user_data")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_log_operations");

                    b.ToTable("log_operations");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.AttachedDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("Date")
                        .HasColumnName("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUploaded")
                        .HasColumnName("date_uploaded")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("FileContentId")
                        .HasColumnName("file_content_id")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .HasColumnName("number")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_attached_documents");

                    b.ToTable("attached_documents");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CertificateNameIssuerId")
                        .HasColumnName("certificate_name_issuer_id")
                        .HasColumnType("integer");

                    b.Property<int>("CertificateTypeId")
                        .HasColumnName("certificate_type_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileContentId")
                        .HasColumnName("file_content_id")
                        .HasColumnType("text");

                    b.Property<string>("Grade")
                        .HasColumnName("grade")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Level")
                        .HasColumnName("level")
                        .HasColumnType("text");

                    b.Property<int>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("integer");

                    b.Property<string>("RegNumber")
                        .HasColumnName("reg_number")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_d_certificates");

                    b.HasIndex("CertificateNameIssuerId")
                        .HasName("ix_d_certificates_certificate_name_issuer_id");

                    b.HasIndex("CertificateTypeId")
                        .HasName("ix_d_certificates_certificate_type_id");

                    b.HasIndex("PersonId")
                        .HasName("ix_d_certificates_person_id");

                    b.ToTable("d_certificates");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.CertificateAttachment", b =>
                {
                    b.Property<int>("CertificateId")
                        .HasColumnName("certificate_id")
                        .HasColumnType("integer");

                    b.Property<long>("AttachedDocumentId")
                        .HasColumnName("attached_document_id")
                        .HasColumnType("bigint");

                    b.HasKey("CertificateId", "AttachedDocumentId")
                        .HasName("pk_certificate_attachments");

                    b.HasIndex("AttachedDocumentId")
                        .HasName("ix_certificate_attachments_attached_document_id");

                    b.ToTable("certificate_attachments");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.CertificateNameIssuer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'8', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_d_certificate_name_issuer");

                    b.ToTable("d_certificate_name_issuer");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Classifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'1819', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_d_classifiers");

                    b.ToTable("d_classifiers");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Diploma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DegreeId")
                        .HasColumnName("degree_id")
                        .HasColumnType("integer");

                    b.Property<int>("EducationInstitutionId")
                        .HasColumnName("education_institution_id")
                        .HasColumnType("integer");

                    b.Property<string>("FileContentId")
                        .HasColumnName("file_content_id")
                        .HasColumnType("text");

                    b.Property<string>("Grade")
                        .HasColumnName("grade")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<DateTime>("IssueDate")
                        .HasColumnName("issue_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("integer");

                    b.Property<string>("RegisterNumber")
                        .HasColumnName("register_number")
                        .HasColumnType("text");

                    b.Property<int?>("SchoolProfileId")
                        .HasColumnName("school_profile_id")
                        .HasColumnType("integer");

                    b.Property<int?>("SpecialtyId")
                        .HasColumnName("specialty_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SuccessfulExam")
                        .HasColumnName("successful_exam")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("pk_d_diplomas");

                    b.HasIndex("DegreeId")
                        .HasName("ix_d_diplomas_degree_id");

                    b.HasIndex("EducationInstitutionId")
                        .HasName("ix_d_diplomas_education_institution_id");

                    b.HasIndex("PersonId")
                        .HasName("ix_d_diplomas_person_id");

                    b.HasIndex("SchoolProfileId")
                        .HasName("ix_d_diplomas_school_profile_id");

                    b.HasIndex("SpecialtyId")
                        .HasName("ix_d_diplomas_specialty_id");

                    b.ToTable("d_diplomas");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.DiplomaAttachment", b =>
                {
                    b.Property<int>("DiplomaId")
                        .HasColumnName("diploma_id")
                        .HasColumnType("integer");

                    b.Property<long>("AttachedDocumentId")
                        .HasColumnName("attached_document_id")
                        .HasColumnType("bigint");

                    b.HasKey("DiplomaId", "AttachedDocumentId")
                        .HasName("pk_diploma_attachments");

                    b.HasIndex("AttachedDocumentId")
                        .HasName("ix_diploma_attachments_attached_document_id");

                    b.ToTable("diploma_attachments");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'7', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("text");

                    b.Property<string>("Branch")
                        .HasColumnName("branch")
                        .HasColumnType("text");

                    b.Property<string>("Departament")
                        .HasColumnName("departament")
                        .HasColumnType("text");

                    b.Property<int?>("DepartmentId")
                        .HasColumnName("department_id")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("text");

                    b.Property<string>("FileContentId")
                        .HasColumnName("file_content_id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FireDate")
                        .HasColumnName("fire_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("HireDate")
                        .HasColumnName("hire_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWorking")
                        .HasColumnName("is_working")
                        .HasColumnType("boolean");

                    b.Property<int>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnName("position")
                        .HasColumnType("text");

                    b.Property<int?>("PreviuosExperience")
                        .HasColumnName("previuos_experience")
                        .HasColumnType("integer");

                    b.Property<int?>("PreviuosExperienceInIs")
                        .HasColumnName("previuos_experience_in_is")
                        .HasColumnType("integer");

                    b.Property<int?>("PreviuosExperienceSummed")
                        .HasColumnName("previuos_experience_summed")
                        .HasColumnType("integer");

                    b.Property<string>("Td")
                        .IsRequired()
                        .HasColumnName("td")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_d_employees");

                    b.HasIndex("DepartmentId")
                        .HasName("ix_d_employees_department_id");

                    b.HasIndex("PersonId")
                        .HasName("ix_d_employees_person_id");

                    b.HasIndex("Td")
                        .IsUnique()
                        .HasName("ix_d_employees_td");

                    b.ToTable("d_employees");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnName("normalized_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_application_role");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("role_name_index");

                    b.ToTable("identity_roles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "5f5d791a-a3bf-40e0-9bb8-11a88cb2f29a",
                            Name = "HR",
                            NormalizedName = "HR"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "ced3ba8f-1ffb-49cc-aa77-1d392990273e",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "c69fe521-2696-452d-bb77-01687c32e6f0",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        });
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnName("role_id")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_application_role_claim");

                    b.HasIndex("RoleId")
                        .HasName("ix_application_role_claim_role_id");

                    b.ToTable("identity_role_claims");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("access_failed_count")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("email_confirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("lockout_enabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("lockout_end")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("MustChangePassword")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("must_change_password")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("normalized_email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnName("normalized_user_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("password_hash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("phone_number_confirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("security_stamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("two_factor_enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("UserNameFromActiveDirectory")
                        .HasColumnName("user_name_from_active_directory")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_application_user");

                    b.HasIndex("NormalizedEmail")
                        .HasName("email_index");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("user_name_index");

                    b.ToTable("identity_users");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_application_user_claim");

                    b.HasIndex("UserId")
                        .HasName("ix_application_user_claim_user_id");

                    b.ToTable("identity_user_claims");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("ProviderKey")
                        .HasColumnName("provider_key")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnName("provider_display_name")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.HasKey("ProviderKey", "LoginProvider")
                        .HasName("pk_identity_user_logins");

                    b.HasIndex("UserId")
                        .HasName("ix_application_user_login_user_id");

                    b.ToTable("identity_user_logins");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Identity.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_identity_user_roles");

                    b.HasIndex("RoleId")
                        .HasName("ix_application_user_role_role_id");

                    b.ToTable("identity_user_roles");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Identity.ApplicationUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_identity_user_tokens");

                    b.ToTable("identity_user_tokens");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Nomenclatures.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'28', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label")
                        .HasColumnType("text");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_nom_branches");

                    b.ToTable("nom_branches");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Nomenclatures.CertificateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'5', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label")
                        .HasColumnType("text");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_nom_certificate_types");

                    b.ToTable("nom_certificate_types");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Nomenclatures.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Adress")
                        .HasColumnName("adress")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label")
                        .HasColumnType("text");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_nom_clients");

                    b.ToTable("nom_clients");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Nomenclatures.Degree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'4', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label")
                        .HasColumnType("text");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_nom_degrees");

                    b.ToTable("nom_degrees");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Nomenclatures.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'52', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BranchId")
                        .HasColumnName("branch_id")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label")
                        .HasColumnType("text");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_nom_departments");

                    b.HasIndex("BranchId")
                        .HasName("ix_nom_departments_branch_id");

                    b.ToTable("nom_departments");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Nomenclatures.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label")
                        .HasColumnType("text");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_nom_document_types");

                    b.ToTable("nom_document_types");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Nomenclatures.EducationInstitution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'6', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label")
                        .HasColumnType("text");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_nom_education_institutions");

                    b.ToTable("nom_education_institutions");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Nomenclatures.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'6', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label")
                        .HasColumnType("text");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_nom_positions");

                    b.ToTable("nom_positions");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Nomenclatures.ProjectRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label")
                        .HasColumnType("text");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_nom_project_role");

                    b.ToTable("nom_project_role");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Nomenclatures.SchoolProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label")
                        .HasColumnType("text");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_nom_school_profiles");

                    b.ToTable("nom_school_profiles");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Nomenclatures.Technology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label")
                        .HasColumnType("text");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_nom_technologies");

                    b.ToTable("nom_technologies");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Nomenclatures.TrainingCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'4', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label")
                        .HasColumnType("text");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_nom_training_centers");

                    b.ToTable("nom_training_centers");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Nomenclatures.TrainingName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'5', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label")
                        .HasColumnType("text");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_nom_training_names");

                    b.ToTable("nom_training_names");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'7', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FullName")
                        .HasColumnName("full_name")
                        .HasColumnType("text");

                    b.Property<string>("PID")
                        .IsRequired()
                        .HasColumnName("pid")
                        .HasColumnType("text");

                    b.Property<byte[]>("Photo")
                        .HasColumnName("photo")
                        .HasColumnType("bytea");

                    b.HasKey("Id")
                        .HasName("pk_d_persons");

                    b.ToTable("d_persons");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClientId")
                        .HasColumnName("client_id")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FullName")
                        .HasColumnName("full_name")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<int>("ManagerId")
                        .HasColumnName("manager_id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("pk_d_projects");

                    b.HasIndex("ClientId")
                        .HasName("ix_d_projects_client_id");

                    b.HasIndex("ManagerId")
                        .HasName("ix_d_projects_manager_id");

                    b.ToTable("d_projects");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<int>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectRoleId")
                        .HasColumnName("project_role_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("pk_d_teams");

                    b.HasIndex("PersonId")
                        .HasName("ix_d_teams_person_id");

                    b.HasIndex("ProjectRoleId")
                        .HasName("ix_d_teams_project_role_id");

                    b.HasIndex("ProjectId", "PersonId", "ProjectRoleId")
                        .IsUnique()
                        .HasName("ix_d_teams_project_id_person_id_project_role_id");

                    b.ToTable("d_teams");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.TechnologyProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("integer");

                    b.Property<int>("TechnologyId")
                        .HasColumnName("technology_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_d_technology_project");

                    b.HasIndex("TechnologyId")
                        .HasName("ix_d_technology_project_technology_id");

                    b.HasIndex("ProjectId", "TechnologyId")
                        .IsUnique()
                        .HasName("ix_d_technology_project_project_id_technology_id");

                    b.ToTable("d_technology_project");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("FileContentId")
                        .HasColumnName("file_content_id")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingCenterId")
                        .HasColumnName("training_center_id")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingNameId")
                        .HasColumnName("training_name_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_d_trainings");

                    b.HasIndex("PersonId")
                        .HasName("ix_d_trainings_person_id");

                    b.HasIndex("TrainingCenterId")
                        .HasName("ix_d_trainings_training_center_id");

                    b.HasIndex("TrainingNameId")
                        .HasName("ix_d_trainings_training_name_id");

                    b.ToTable("d_trainings");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.TrainingAttachment", b =>
                {
                    b.Property<int>("TrainingId")
                        .HasColumnName("training_id")
                        .HasColumnType("integer");

                    b.Property<long>("AttachedDocumentId")
                        .HasColumnName("attached_document_id")
                        .HasColumnType("bigint");

                    b.HasKey("TrainingId", "AttachedDocumentId")
                        .HasName("pk_training_attachments");

                    b.HasIndex("AttachedDocumentId")
                        .HasName("ix_training_attachments_attached_document_id");

                    b.ToTable("training_attachments");
                });

            modelBuilder.Entity("CDN.Core3.Data.Data.CdnFileContent", b =>
                {
                    b.HasOne("CDN.Core3.Data.Data.CdnFile", "File")
                        .WithMany("FileContents")
                        .HasForeignKey("CdnFileId")
                        .HasConstraintName("fk_cdn_file_contents_cdn_files_cdn_file_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Certificate", b =>
                {
                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.CertificateNameIssuer", "CertificateNameIssuer")
                        .WithMany()
                        .HasForeignKey("CertificateNameIssuerId")
                        .HasConstraintName("fk_d_certificates_d_certificate_name_issuer_certificate_name_i")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Nomenclatures.CertificateType", "CertificateType")
                        .WithMany()
                        .HasForeignKey("CertificateTypeId")
                        .HasConstraintName("fk_d_certificates_nom_certificate_types_certificate_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Person", "Person")
                        .WithMany("Certificates")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("fk_d_certificates_d_persons_person_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.CertificateAttachment", b =>
                {
                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.AttachedDocument", "AttachedDocument")
                        .WithMany()
                        .HasForeignKey("AttachedDocumentId")
                        .HasConstraintName("fk_certificate_attachments_attached_documents_attached_documen")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Certificate", "Certificate")
                        .WithMany("CertificateAttachments")
                        .HasForeignKey("CertificateId")
                        .HasConstraintName("fk_certificate_attachments_d_certificates_certificate_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Diploma", b =>
                {
                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Nomenclatures.Degree", "Degree")
                        .WithMany()
                        .HasForeignKey("DegreeId")
                        .HasConstraintName("fk_d_diplomas_nom_degrees_degree_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Nomenclatures.EducationInstitution", "EducationInstitution")
                        .WithMany()
                        .HasForeignKey("EducationInstitutionId")
                        .HasConstraintName("fk_d_diplomas_nom_education_institutions_education_institution")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Person", "Person")
                        .WithMany("Diplomas")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("fk_d_diplomas_d_persons_person_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Nomenclatures.SchoolProfile", "SchoolProfile")
                        .WithMany()
                        .HasForeignKey("SchoolProfileId")
                        .HasConstraintName("fk_d_diplomas_nom_school_profiles_school_profile_id");

                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Classifier", "Classifier")
                        .WithMany()
                        .HasForeignKey("SpecialtyId")
                        .HasConstraintName("fk_d_diplomas_d_classifiers_specialty_id");
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.DiplomaAttachment", b =>
                {
                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.AttachedDocument", "AttachedDocument")
                        .WithMany()
                        .HasForeignKey("AttachedDocumentId")
                        .HasConstraintName("fk_diploma_attachments_attached_documents_attached_document_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Diploma", "Diploma")
                        .WithMany("DiplomaAttachments")
                        .HasForeignKey("DiplomaId")
                        .HasConstraintName("fk_diploma_attachments_d_diplomas_diploma_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Employee", b =>
                {
                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Nomenclatures.Department", null)
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_d_employees_nom_departments_department_id");

                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Person", "Person")
                        .WithMany("Employee")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("fk_d_employees_d_persons_person_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Identity.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_application_role_claim_application_role_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_application_user_claim_application_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_application_user_login_application_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Identity.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_application_user_role_application_role_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_application_user_role_application_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_application_user_token_application_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Nomenclatures.Department", b =>
                {
                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Nomenclatures.Branch", "Branch")
                        .WithMany("Departments")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("fk_nom_departments_nom_branches_branch_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Project", b =>
                {
                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Nomenclatures.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .HasConstraintName("fk_d_projects_nom_clients_client_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("fk_d_projects_d_persons_manager_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Team", b =>
                {
                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Person", "Person")
                        .WithMany("Teams")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("fk_d_teams_d_persons_person_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_d_teams_d_projects_project_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Nomenclatures.ProjectRole", "ProjectRole")
                        .WithMany()
                        .HasForeignKey("ProjectRoleId")
                        .HasConstraintName("fk_d_teams_nom_project_role_project_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.TechnologyProject", b =>
                {
                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_d_technology_project_d_projects_project_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Nomenclatures.Technology", "Technology")
                        .WithMany()
                        .HasForeignKey("TechnologyId")
                        .HasConstraintName("fk_d_technology_project_nom_technologies_technology_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.Training", b =>
                {
                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Person", "Person")
                        .WithMany("Trainings")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("fk_d_trainings_d_persons_person_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Nomenclatures.TrainingCenter", "TrainingCenter")
                        .WithMany()
                        .HasForeignKey("TrainingCenterId")
                        .HasConstraintName("fk_d_trainings_nom_training_centers_training_center_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Nomenclatures.TrainingName", "TrainingName")
                        .WithMany()
                        .HasForeignKey("TrainingNameId")
                        .HasConstraintName("fk_d_trainings_nom_training_names_training_name_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IOWebFramework.Infrastructure.Data.Models.TrainingAttachment", b =>
                {
                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.AttachedDocument", "AttachedDocument")
                        .WithMany()
                        .HasForeignKey("AttachedDocumentId")
                        .HasConstraintName("fk_training_attachments_attached_documents_attached_document_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IOWebFramework.Infrastructure.Data.Models.Training", "Training")
                        .WithMany("TrainingAttachments")
                        .HasForeignKey("TrainingId")
                        .HasConstraintName("fk_training_attachments_d_trainings_training_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
