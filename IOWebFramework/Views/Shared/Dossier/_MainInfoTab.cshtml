@model IOWebFramework.Core.Models.Dossier.EmployeeMainInfoViewModel
@{
    string avatar = (Model.Photo == null || !(Model?.Photo).Any()) ? Url.Content("~/img/avatar.png") : $"data:image/png;base64,{Convert.ToBase64String(Model.Photo)}";

}
<div class="card card-body bg-light">
    <div>
        <img class="profile-user-img img-responsive img-bordered" id="UserDetailDTO_Photo_Img" src="@avatar">
    </div>
    <br/>

    <div>@Html.LabelFor(x => x.Td, new { @readonly = "readonly" }) :  @Html.DisplayFor(x => x.Td, new { @readonly = "readonly" })</div>   
    <div>@Html.LabelFor(x => x.FormatedPreviuosExperienceInIs, new { @readonly = "readonly" }) :  @Html.DisplayFor(x => x.FormatedPreviuosExperienceInIs, new { @readonly = "readonly" })</div>   
    <div>@Html.LabelFor(x => x.FormatedPreviuosExperience, new { @readonly = "readonly" }) :  @Html.DisplayFor(x => x.FormatedPreviuosExperience, new { @readonly = "readonly" })</div>
    <div>@Html.LabelFor(x => x.FormatedPreviuosExperienceSummed, new { @readonly = "readonly" }) :  @Html.DisplayFor(x => x.FormatedPreviuosExperienceSummed, new { @readonly = "readonly" })</div>
    <div>@Html.LabelFor(x => x.Branch, new { @readonly = "readonly" }) :  @Html.DisplayFor(x => x.Branch, new { @readonly = "readonly" })</div>
    <div>@Html.LabelFor(x => x.Department, new { @readonly = "readonly" }) :  @Html.DisplayFor(x => x.Department, new { @readonly = "readonly" })</div>
    <div>@Html.LabelFor(x => x.Position, new { @readonly = "readonly" }) :  @Html.DisplayFor(x => x.Position, new { @readonly = "readonly" })</div>

</div>